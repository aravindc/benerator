<?xml version="1.0" encoding="iso-8859-1"?>
<setup 
	xmlns="http://databene.org/benerator/0.6.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://databene.org/benerator/0.6.0 http://databene.org/benerator-0.6.0.xsd">

	<comment>
		 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		 !   Demonstration file for populating the shop database.    !
		 !                                                           !
		 !   You can choose a database and a stage like this:        !
		 !       -Dstage=development -Ddatabase=oracle               !
		 !                                                           !
		 !   These database types are provided:                      !
		 !       oracle, db2, sql_server, mysql, postgres, hsql,     !
		 !       hsqlmem, mysql, firebird, derby, h2                 !
		 !                                                           !
		 !   ...and these stage configurations:                      !
		 !       development, perftest                               !
		 !                                                           !
		 !   Set up your database connection in the file             !
		 !       &lt;database&gt;/shop.&lt;database&gt;.properties   !
		 !                                                           !
		 !   You may want to try different generation quantities in  !
		 !       shop.&lt;stage&gt;.properties                       !
		 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	</comment>
	 
	<import defaults  = "true"
			domains   = "person,net,product"
			platforms = "db"/>

	<comment>setting default values</comment>
	<property name="dbSchema"   value="" />
	<property name="dbPassword" value="" />
	<property name="dbBatch"    value="false" />
	
	<if test="context.get('stage') == null">
		<comment>no stage specified, using 'development'</comment>
		<execute>stage = 'development'</execute>
	</if>

	<if test="context.get('database') == null">
		<comment>no database specified, using 'hsqlmem'</comment>
		<execute>database = 'hsqlmem'</execute>
	</if>

	<comment>import stage and database specific properties</comment>
	<include uri="{ftl:${database}/shop.${database}.properties}" />
	<include uri="{ftl:shop.${stage}.properties}" />

	<comment>log the settings to the console</comment>
	<echo message="Starting generation for" />
	<echo message="{ftl:  ${product_count + 6} products}" />
	<echo message="{ftl:  ${customer_count + 1} customers}" />
	<echo message="{ftl:  ${orders_per_customer} orders per customer}" />
	<echo message="{ftl:  ${items_per_order} items per order}" />
	<echo message="{ftl:Setup: ${benerator.defaultEncoding} def.pageSize=${benerator.defaultPageSize} def.script=${benerator.defaultScript}}" />
	<echo message="{ftl:JDBC URL: ${dbUrl}}" />

    <comment>define a database that will be referred by the id 'db' later</comment>
    <database id="db" url="{dbUrl}" driver="{dbDriver}" schema="{dbSchema}"
        user="{dbUser}" password="{dbPassword}" batch="{dbBatch}" />

	<comment>drop the current tables/sequences if they exist and recreate them</comment>
	<execute uri="{ftl:${database}/drop_tables.${database}.sql}"   target="db" onError="ignore" />
	<execute uri="{ftl:${database}/create_tables.${database}.sql}" target="db" />
	
	<bean id="idGen" spec="new DBSeqHiLoGenerator('seq_id_gen', 100, db)" />

	<comment>Creating a valid base data set for regression testing by importing a DbUnit file</comment>
	<iterate source="shop.dbunit.xml" consumer="db" />

	<comment>Importing some more predefined products from a CSV file</comment>
	<iterate source="products.import.csv" type="db_product" encoding="utf-8" consumer="db" />

	<comment>You could import them from a flat file as well, e.g.
		iterate name="db_product" source="products.import.flat" 
			pattern="ean_code[13],name[30],category_id[9],price[8r0],manufacturer[30]" consumer="db" /</comment>

	<comment>
		Creating products of random attributes &amp; category and exporting them to 
		the database as well as to a flat file
	</comment>
	<generate type="db_product" count="{product_count}" consumer="db">
		<id name="ean_code" generator="new EANGenerator(true)" />
		<reference name="category_id" targetType="db_category" source="db" distribution="random" />
		<attribute name="price" type="big_decimal" min="0.49" max="99.99" precision="0.10" distribution="cumulated" />
		<!-- Export the generated products not only to the database, but also to a flat file -->
		<consumer class="FlatFileEntityExporter">
			<property name="uri" value="products.flat" />
			<property name="columns" value="ean_code[13],name[30l],price[10.2r0]" />
		</consumer>
	</generate>

	<comment>create one default order for each customer based on a DBUnit template</comment>
	<!-- generate name="db_order" consumer="db">
		<id name="id" generator="idGen" />
		<attribute name="customer_id" source="db" selector="select id from db_customer" />
		<iterate source="default_order.dbunit.xml" type="db_order_item" consumer="db">
	        <id name="id" generator="idGen" />
		</generate>
	</generate-->

    <comment>create customers</comment>
    <generate type="db_user" count="{customer_count}" consumer="db">
        <variable name="person" generator="PersonGenerator" dataset="{country}" locale="{locale}"/>
        <id name="id" generator="idGen" />
        <attribute name="name" script="person.givenName + ' ' + person.familyName" />
        <attribute name="email" generator="EMailAddressGenerator" />
        <attribute name="password" pattern="[A-Za-z0-9]{8,12}" />
        <reference name="role_id" constant="customer" />
        <generate type="db_customer" count="1" consumer="db">
            <id name="id" script="db_user.id" />
            <attribute name="category" values="'A','B','C'" />
            <attribute name="salutation" script="person.salutation" />
            <attribute name="first_name" script="person.givenName" />
            <attribute name="last_name" script="person.familyName" />
            <attribute name="birth_date" nullable="false" />
            <!-- Export the customers not only to the database, but their names and passwords to a CSV file -->
            <consumer class="CSVEntityExporter">
                <property name="uri" value="customers.csv" />
                <property name="columns" value="id,password" />
            </consumer>
        </generate>
    </generate>

	<comment>create orders for random customers and random products</comment>
	<generate type="db_order" count="{customer_count * orders_per_customer}" consumer="db">
        <id name="id" generator="idGen" />
		<reference name="customer_id" source="db" targetType="db_customer" cyclic="true" />
        <attribute name="total_price" constant="0" />
	</generate>

	<comment>create order items</comment>
	<generate type="db_order_item"
			count="{customer_count * orders_per_customer * items_per_order}" consumer="db">
		<variable name="product" source="db" selector="select ean_code, price from db_product" distribution="cumulated" />
        <id name="id" generator="idGen" />
		<attribute name="number_of_items" min="1" max="27" distribution="cumulated" />
		<reference name="order_id" source="db" selector="select id from db_order where id &gt; 1" cyclic="true" />
		<reference name="product_ean_code" script="product[0]" />
		<attribute name="total_price" script="product[1] * db_order_item.number_of_items" />
	</generate>

    <comment>fix order data</comment>
    <iterate source="db" type="db_order" consumer="db.updater()">
        <attribute name="total_price" source="db" 
            selector="{{ftl:select sum(total_price) from db_order_item where order_id = ${db_order.id}}}" 
            cyclic="true"/>
    </iterate>

</setup>